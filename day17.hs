{-# OPTIONS_GHC -Wno-incomplete-patterns #-}

import Utils

{-


>>> getAllY (-136) (-171)
[(-171,0),(-170,0),(-169,0),(-168,0),(-167,0),(-166,0),(-165,0),(-164,0),(-163,0),(-162,0),(-161,0),(-160,0),(-159,0),(-158,0),(-157,0),(-156,0),(-155,0),(-154,0),(-153,0),(-152,0),(-151,0),(-150,0),(-149,0),(-148,0),(-147,0),(-146,0),(-145,0),(-144,0),(-143,0),(-142,0),(-141,0),(-140,0),(-139,0),(-138,0),(-137,0),(-136,0),(-85,1),(-84,1),(-83,1),(-82,1),(-81,1),(-80,1),(-79,1),(-78,1),(-77,1),(-76,1),(-75,1),(-74,1),(-73,1),(-72,1),(-71,1),(-70,1),(-69,1),(-68,1),(-56,2),(-55,2),(-54,2),(-53,2),(-52,2),(-51,2),(-50,2),(-49,2),(-48,2),(-47,2),(-46,2),(-45,2),(-41,3),(-40,3),(-39,3),(-38,3),(-37,3),(-36,3),(-35,3),(-34,3),(-33,3),(-32,4),(-31,4),(-30,4),(-29,4),(-28,4),(-27,4),(-26,4),(-26,5),(-25,5),(-24,5),(-23,5),(-22,5),(-21,5),(-21,6),(-20,6),(-19,6),(-18,6),(-17,6),(-17,7),(-16,7),(-15,7),(-15,8),(-14,7),(-14,8),(-13,8),(-12,8),(-12,9),(-11,9),(-10,9),(-10,10),(-9,10),(-8,10),(-8,11),(-7,11),(-7,12),(-6,11),(-6,12),(-5,12),(-5,13),(-4,13),(-4,14),(-3,14),(-3,15),(-2,15),(-2,16),(-1,15),(-1,16),(-1,17),(0,16),(0,17),(0,18),(1,18),(1,19),(2,19),(2,20),(3,20),(3,21),(4,21),(4,22),(5,22),(5,23),(6,24),(6,25),(7,25),(7,26),(8,27),(9,28),(9,29),(10,30),(11,31),(11,32),(12,33),(13,34),(13,35),(14,36),(14,37),(15,38),(16,39),(16,40),(17,41),(18,43),(19,45),(20,46),(20,47),(21,48),(22,50),(23,52),(24,54),(25,55),(25,56),(26,57),(27,59),(28,61),(29,63),(30,65),(31,67),(32,68),(33,70),(34,72),(35,74),(36,76),(37,78),(38,80),(39,82),(40,84),(44,91),(45,93),(46,95),(47,97),(48,99),(49,101),(50,103),(51,105),(52,107),(53,109),(54,111),(55,113),(67,136),(68,138),(69,140),(70,142),(71,144),(72,146),(73,148),(74,150),(75,152),(76,154),(77,156),(78,158),(79,160),(80,162),(81,164),(82,166),(83,168),(84,170),(135,271),(136,273),(137,275),(138,277),(139,279),(140,281),(141,283),(142,285),(143,287),(144,289),(145,291),(146,293),(147,295),(148,297),(149,299),(150,301),(151,303),(152,305),(153,307),(154,309),(155,311),(156,313),(157,315),(158,317),(159,319),(160,321),(161,323),(162,325),(163,327),(164,329),(165,331),(166,333),(167,335),(168,337),(169,339),(170,341)]

>>> withinX 2 20 30
[8,9,10,11]

>>> length $ removeDuplicates $ allVelocities 60 94 (-136) (-171)
2270
-}

allVelocities x1 x2 y1 y2 = foldr (\(yVal, step) acc -> [(xVal, yVal) | xVal <- withinX step x1 x2] ++ acc) [] allY
    where 
        allY = getAllY y1 y2

getAllY y1 y2 = allY
    where
        getAllY [] = []
        getAllY (y:ys) = case within y y1 y2 of
            [] -> getAllY ys
            as -> [(y, a) | a <- as] ++ getAllY ys
        allY = getAllY [-500..500]

withinX s' x1 x2 = count
    where
        s = fromIntegral s'
        high = floor $ ((fromIntegral (max x1 x2) :: Double) + s * (s + 1) / 2) / (s + 1)
        count = foldr (\x acc -> let xpos = posX x s' in if xpos >= x1 && xpos <= x2 then x:acc else acc) [] [0..500]

posX :: Integral a => a -> a -> a
posX x s
    | s > x = pos x x
    | otherwise = pos x s

within :: (Integral a) => a -> a -> a -> [a]
within y y1 y2 = [n1..n2]
    where
        n1 = ceiling $ solve y (max y1 y2)
        n2 = floor $ solve y (min y1 y2)

pos :: (Integral a) => a -> a -> a
pos v s = v * (s + 1) - s * (s+1) `div` 2

solve :: (Floating a, Integral a1) => a1 -> a1 -> a
solve y' yx' = ((2*y-1) + sqrt ((2*y-1)^2 + 8*(y-yx))) / 2
    where y = fromIntegral y'
          yx = fromIntegral yx'

solve' :: (Floating a, Integral a1) => a1 -> a1 -> a
solve' y' yx' = ((2*y-1) - sqrt ((2*y-1)^2 + 8*(y-yx))) / 2
    where y = fromIntegral y'
          yx = fromIntegral yx'
